// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
const SquareVerifier = artifacts.require('./verifier');
const truffleAssert = require('truffle-assertions');

contract('Test SquareVerifier', accounts => {
    describe('test verification', () => {
        beforeEach(async () => {
            this.contract = await SquareVerifier.new({from: accounts[0]});
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps

        it('correct proof', async () => {
            let check_proof_validity = await this.contract.verifyTx.call(
                [
                    "0x0768a13ff0766ecc82a41f98e281b3015ec55b7ca03904ded442f410602e70c0",
                    "0x2759d69ab5b0fd939647a8e8cd7997cece8ae19a8f06e4b03a30bb56c048687e"
                  ], [
                    [
                      "0x2b952aa67dc299f023bc2566e46440403a3fe8dba2f18e4ce38afcd3783377ab",
                      "0x16284bd6a2333ca000d393081b9d625a4a696a219c7474d5ce32c1bb22dd346d"
                    ],
                    [
                      "0x10f095ad0d43d9c920b3166b97840222222a95cff67676e4ae02b884b07d994a",
                      "0x177af5a552325dd2ab7ce753d9b2238d1d8f8195f89da5cc7af244a8a576ccc8"
                    ]
                  ],[
                    "0x06615a346071f2d5917e296d2241f2c7e43a0a0a3024d159327cb659f34b5fc5",
                    "0x1f8478f365680002c468012ff711ac73c30e1592547dcdf74b01340d51077ee1"
                  ],[
                    "0x0000000000000000000000000000000000000000000000000000000000000009",
                    "0x0000000000000000000000000000000000000000000000000000000000000001"
                  ]
            );
            assert.equal(check_proof_validity, true, "correct proof");
        });

        // Test verification with incorrect proof
        it('incorrect proof', async () => {
            let check_proof_validity = await this.contract.verifyTx.call(
                [
                    "0x0768a13ff0766ecc82a41f98e281b3015ec55b7ca03904ded442f410602e70c0",
                    "0x2759d69ab5b0fd939647a8e8cd7997cece8ae19a8f06e4b03a30bb56c048687e"
                  ], [
                    [
                      "0x2b952aa67dc299f023bc2566e46440403a3fe8dba2f18e4ce38afcd3783377ab",
                      "0x16284bd6a2333ca000d393081b9d625a4a696a219c7474d5ce32c1bb22dd346d"
                    ],
                    [
                      "0x10f095ad0d43d9c920b3166b97840222222a95cff67676e4ae02b884b07d994a",
                      "0x177af5a552325dd2ab7ce753d9b2238d1d8f8195f89da5cc7af244a8a576ccc8"
                    ]
                  ],[
                    "0x06615a346071f2d5917e296d2241f2c7e43a0a0a3024d159327cb659f34b5fc5",
                    "0x1f8478f365680002c468012ff711ac73c30e1592547dcdf74b01340d51077ee1"
                  ],[
                    "0x0000000000000000000000000000000000000000000000000000000000000009",
                    "0x0000000000000000000000000000000000000000000000000000000000000002"
                  ]
            );
            assert.equal(check_proof_validity, false, "incorrect proof");
        });
    });
});